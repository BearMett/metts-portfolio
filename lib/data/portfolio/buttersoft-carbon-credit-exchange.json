{
  "id": "buttersoft-carbon-credit-exchange",
  "date": "2024-03",
  "companyId": "buttersoft",
  "title": {
    "ko": "카본몬스터 백엔드 시스템 (거래소 엔진) 개발",
    "en": "Carbon Monster Backend System (Exchange Engine) Development"
  },
  "shortDesc": {
    "ko": "NFT 거래 플랫폼의 고성능 주문 매칭 엔진 개발",
    "en": "Built a high-performance order matching engine for an NFT trading platform"
  },
  "description": {
    "ko": "카본몬스터는 탄소 배출권을 NFT로 토큰화하여 거래할 수 있는 플랫폼입니다. 이 프로젝트에서는 NestJS를 기반으로 확장 가능한 백엔드 아키텍처를 설계 및 구현했으며, 특히 Red-Black Tree 자료구조를 활용한 고성능 주문 매칭 엔진을 개발했습니다. 도메인 주도 설계(DDD) 원칙을 적용하여 복잡한 비즈니스 로직을 명확하게 구조화하고, 마이크로서비스 아키텍처를 통해 각 기능의 독립적인 확장이 가능하도록 구현했습니다.",
    "en": "Carbon Monster is a platform that tokenizes carbon credits as NFTs for trading. For this project, I designed and implemented a scalable backend architecture using NestJS, including a high-performance order matching engine powered by a Red-Black Tree data structure. By applying Domain-Driven Design (DDD) principles, I structured complex business logic clearly, and used a microservices architecture to enable independent scaling of each feature."
  },
  "techStack": [
    "NestJS",
    "TypeScript",
    "MySQL",
    "Redis",
    "Docker",
    "WebSocket",
    "TypeORM",
    "AWS S3"
  ],
  "category": [
    "backend",
    "database"
  ],
  "tasks": {
    "ko": [
      "확장 가능한 거래 시스템을 위한 전체 프로젝트 구조 설계",
      "Red-Black Tree 자료구조를 활용한 효율적인 주문 매칭 엔진 개발",
      "각 종목별로 독립적으로 확장 가능한 수직 확장 아키텍처 설계",
      "도메인 주도 설계(DDD) 원칙을 적용한 비즈니스 로직 구현",
      "RESTful API 및 WebSocket을 통한 실시간 주문 처리 시스템 개발",
      "마이크로서비스 아키텍처의 효율적인 통신을 위한 이벤트 기반 메시징 시스템 구현"
    ],
    "en": [
      "Designed the overall project structure for a scalable trading system.",
      "Developed an efficient order matching engine using a Red-Black Tree data structure.",
      "Created a vertically scalable architecture for independent scaling per trading item.",
      "Implemented business logic following Domain-Driven Design (DDD) principles.",
      "Built a real-time order processing system with RESTful APIs and WebSocket.",
      "Set up an event-based messaging system for efficient microservices communication."
    ]
  },
  "achievements": {
    "ko": [
      "Red-Black Tree 알고리즘을 활용하여 주문 매칭 시 O(log n)의 시간 복잡도를 달성하여 거래 처리 성능 향상",
      "종목별 독립적 실행이 가능한 아키텍처로 시스템 확장성 및 안정성 확보",
      "도메인 주도 설계를 통해 복잡한 비즈니스 로직을 명확하게 구조화하여 유지보수성 향상",
      "이벤트 기반 아키텍처를 통한 마이크로서비스 간 효율적인 통신 구현"
    ],
    "en": [
      "Achieved O(log n) time complexity for order matching with Red-Black Tree, boosting trade performance.",
      "Ensured scalability and stability with an architecture supporting independent execution per item.",
      "Improved maintainability by clearly structuring complex business logic with DDD.",
      "Enabled efficient microservices communication through an event-based architecture."
    ]
  }
}